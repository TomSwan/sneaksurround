# sneaksurround.8o - (C) 2020 by Tom Swan - GPLv3 (see license.txt)
# Originally published as "Surround" from Pips for VIPS I (1979)

:const TRUE 1
:const FALSE 0
:const HEIGHT 32
:const WIDTH 64
:const MAX_X 63
:const MAX_Y 31
:const BORDER_L 4
:const BORDER_R 60
:const BORDER_T 4
:const BORDER_B 28
:const BUZZER_ON 1
:const BLOCK_SIZE 8
:const NUM_COLUMNS 8  # WIDTH / BLOCK_SIZE
 
: snake
0x80  
: pixel
0x80

# order-dependent storage
: level
0x01
: max_level
0x06  # const 1..6; set lower for easier game
: targets_remain
0x00
: num_targets
0x00
: targets
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  
: test_pattern
0xe0 0xe0 0xe0 

# register save area
: reg_hit_target
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
: reg_count_target
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
: reg_do_snake
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
: reg_targets
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 

# snake tail (of lengths up to 64)
: snake_tail
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 

0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 

# patterns and backgrounds
: logo
0xAA 0x00 0x7F 0x14 0x17 0x11 0x17 0x00 
: win_image
0x00 0x24 0x00 0x18 0x42 0x24 0x18 0x00
: lose_image
0x00 0x42 0x24 0x18 0x18 0x24 0x42 0x00
: char_slash
0x00 0x10 0x20 0x40 0x80 0x00
: level1
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: level2
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: level3
0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80   0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80   0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80   0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
: level4
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
: level5
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
: level6
0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01   0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80   0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80   0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80   0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff
0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff

:alias x v0
:alias y v1
:alias speed v2
:alias snake_speed v2
:alias full_screen v3
:alias dir_x v4
:alias dir_y v5
:alias snake_index v6
:alias snake_length v7
:alias erasing v8
:alias loop_count va
:alias hit_flag vb
:alias flash_count vb
:alias address_inc vc
:alias increment vd
:alias count ve
:alias temp ve

: HALT
  vf := 40
 buzzer := vf
: HALT_SILENT
 loop
 again
;

: time_out
  delay := vf
  loop
    vf := delay
    if vf != 0 then
  again
;

# show full-page image, swiping right-left-right
: show_page
  x := 0
  y := 0
  increment := BLOCK_SIZE
  loop
    count := 1
    loop
      sprite x y BLOCK_SIZE
      vf := speed
      time_out 
      x += increment
      count += 1
      if full_screen == TRUE begin
        vf := BLOCK_SIZE
        i += vf
      end
      if count <= NUM_COLUMNS then
    again
    x -= increment
    y += BLOCK_SIZE
    temp := 0
    temp -= increment
    increment := temp
    if y < HEIGHT then
  again
;

# create a new target separated by one pixel from other objects
# returns X,Y for new target in v0 v1
: create_target
  i := test_pattern
  loop
    v0 := random MAX_X
    v1 := random MAX_Y
    if v0 < BORDER_L then v0 += BORDER_L
    if v0 > BORDER_R then v0 := BORDER_R
    if v1 < BORDER_T then v1 += BORDER_T
    if v1 > BORDER_B then v1 := BORDER_B
    sprite v0 v1 3
    hit_flag := vf
    vf := BUZZER_ON
    buzzer := vf
    vf := 8
    time_out
    sprite v0 v1 3
    if hit_flag != 0 then
  again
  v0 += 1
  v1 += 1
;

# input: loop_count (va) == number of targets
# sets num_targets and targets_remain
# populates and displays targets array 
: place_targets
  i := reg_targets
  save v1
  v0 := loop_count
  i := targets_remain
  save v0
  save v0  # num_targets == targets_remain
  address_inc := 0
  loop
    create_target
    i := targets
    i += address_inc
    save v1
    i := pixel
    sprite v0 v1 1
    address_inc += 2
    loop_count += -1
    if loop_count > 0 then
  again
  i := reg_targets
  load v1
;

# display all memorized targets
: show_targets
  i := reg_targets
  save v1
  i := num_targets
  load v0
  loop_count := v0
  address_inc := 0
  loop
    i := targets
    i += address_inc
    load v1
    address_inc += 2
    i := pixel
    sprite v0 v1 1
    loop_count += -1
    if loop_count > 0 then
  again
  i := reg_targets
  load v1
;

# blink targets on and off 
: flash_targets
  flash_count := 10
  loop
    show_targets
    flash_count += -1
    if flash_count > 0 then
  again
;

: title_page
  clear
  speed := 2
  full_screen := FALSE
  i := logo
  show_page
  i := logo
  show_page
;

: win_page
  clear
  speed := 2
  full_screen := FALSE
  i := win_image
  show_page
  vf := 100
  time_out
;

: lose_page
  clear
  speed := 2
  full_screen := FALSE
  i := lose_image
  show_page
  HALT
;

: show_field
  clear
  i := level
  load v0
  if v0 == 1 then i := level1
  if v0 == 2 then i := level2
  if v0 == 3 then i := level3
  if v0 == 4 then i := level4
  if v0 == 5 then i := level5
  if v0 == 6 then i := level6
  speed := 1
  full_screen := TRUE
  show_page
;

# set targets_remain <- targets_remain - 1
# returns num_remaining targets in vf
: count_target
  i := reg_count_target
  save v0
  i := targets_remain
  load v0
  v0 += -1
  i := targets_remain
  save v0
  vf := v0
  i := reg_count_target
  load v0
;

# return vf == TRUE if v0, v1 is a target
: hit_target
  i := reg_hit_target
  save v4
  v2 := v0
  v3 := v1
  v4 := 0 
  temp := FALSE
  i := num_targets
  load v0
  loop_count := v0
  loop
    i := targets
    i += v4
    load v1
    if v2 == v0 
    begin
      if v3 == v1 
      begin 
        v0 := 0xff
        v1 := 0xff
        i := targets
        i += v4
        save v1
        temp := TRUE
        loop_count := 1
        vf := 8
        time_out
      end
    end
    v4 += 2
    loop_count += -1
    if loop_count != 0 then
  again
  i := reg_hit_target
  load v4
  vf := temp
;  

: init_snake
  snake_index := 0
  erasing := FALSE
  x := 0
  y := 26
  dir_x := 1
  dir_y := 0
;

: do_snake
  loop

    i := snake
    hit_flag := FALSE
    sprite x y 1
    if vf != 0 begin
      hit_flag := TRUE
      vf := BUZZER_ON
      buzzer := vf
    end

    if erasing == TRUE begin
      i := reg_do_snake
      save v1
      i := snake_tail
      i += snake_index
      load v1
      i := snake
      sprite x y 1
      if vf == 0 then
        sprite x y 1
      i := reg_do_snake
      load v1
    end

    i := snake_tail
    i += snake_index
    save v1
    snake_index += 2
    if snake_index >= snake_length begin
      erasing := TRUE
      snake_index := 0
    end
    
    vf := snake_speed
    time_out
    
    va := 0x05
    if va key begin
      dir_x := 0
      dir_y := -1
    end       
    va := 0x07
    if va key begin
      dir_x := -1
      dir_y := 0
    end
    va := 0x08
    if va key begin
      dir_x := 0
      dir_y := 1
    end
    va := 0x09
    if va key begin
      dir_x := 1
      dir_y := 0
    end

    if hit_flag == FALSE
    begin
      x += dir_x
      if x == WIDTH then x := 0
      if x == 0xff then x := MAX_X
      y += dir_y
      if y == HEIGHT then y := 0
      if y == 0xff then y := MAX_Y
      vf := 1
    else
      hit_target
      if vf == TRUE begin
        count_target  # sets vf to num targets remaining
      else
        lose_page
      end
    end

    if vf != 0 then
  again
;

: show_level
  clear
  v2 := 24  # x
  v3 := 12  # y
  i := level
  load v1
  i := hex v0
  sprite v2 v3 5
  v2 += 8
  i := char_slash
  sprite v2 v3 6
  v2 += 8
  i := hex v1
  sprite v2 v3 5
  vf := 100
  time_out
;

# set current level to v0
: set_level
  i := level
  save v0
;

# returns vf == TRUE if level == max_level
# else returns vf == FALSE
: check_level
  i := level
  load v1
  v0 -= v1
;

: setup_game
  clear
  show_level
  show_field
: continue_game
  place_targets
  flash_targets
;

: main

  title_page
  
  jump level_one  # change to alter starting level

# LEVEL ONE

: level_one
  v0 := 1   # level
  set_level
  va := 2   # targets
  setup_game
  snake_speed := 10
  snake_length := 10
  init_snake
  do_snake

  va := 3
  continue_game
  snake_speed := 9
  snake_length := 14
  do_snake

  check_level
  if vf == TRUE then jump win

# LEVEL TWO

: level_two
  v0 := 2   # level
  set_level
  va := 3   # targets
  setup_game
  snake_speed := 9
  snake_length := 16
  init_snake
  do_snake

  va := 4
  continue_game
  snake_speed := 8
  snake_length := 28
  do_snake

  check_level
  if vf == TRUE then jump win

# LEVEL THREE

: level_three
  v0 := 3   # level
  set_level
  va := 5   # targets
  setup_game
  snake_speed := 7
  snake_length := 32
  init_snake
  do_snake

  va := 6
  continue_game
  snake_speed := 6
  snake_length := 40
  do_snake

  check_level
  if vf == TRUE then jump win

# LEVEL FOUR

: level_four
  v0 := 4   # level
  set_level
  va := 6   # targets
  setup_game
  snake_speed := 6
  snake_length := 42
  init_snake
  do_snake

  va := 7
  continue_game
  snake_speed := 5
  snake_length := 48
  do_snake

  check_level
  if vf == TRUE then jump win

# LEVEL FIVE

: level_five
  v0 := 5   # level
  set_level
  va := 8   # targets
  setup_game
  snake_speed := 4
  snake_length := 50
  init_snake
  do_snake

  va := 9
  continue_game
  snake_speed := 3
  snake_length := 56
  do_snake

  check_level
  if vf == TRUE then jump win

# LEVEL SIX

: level_six
  v0 := 6   # level
  set_level
  va := 9   # targets
  setup_game
  snake_speed := 3
  snake_length := 58
  init_snake
  do_snake

  va := 10
  continue_game
  snake_speed := 2
  snake_length := 64
  do_snake

: win
  win_page
  HALT_SILENT
